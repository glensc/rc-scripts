#!/bin/sh
PATH=/sbin:/usr/sbin:/bin:/usr/bin

cd /etc/sysconfig/network-scripts
. /etc/sysconfig/network
. /etc/rc.d/init.d/functions.network

need_hostname

CONFIG=$1

[ -z "$CONFIG" ] && {
    echo "usage: ifup <device name>" >&2
    exit 1
}

[ -f "/etc/sysconfig/interfaces/$CONFIG" ] || CONFIG=ifcfg-$CONFIG
[ -f "/etc/sysconfig/interfaces/$CONFIG" ] || {
    echo "usage: ifup <device name>" >&2
    exit 1
}

if [ `id -u` != 0 ]; then
    if [ -x /usr/sbin/usernetctl ]; then
	exec /usr/sbin/usernetctl $CONFIG up
    fi
    echo "Users cannot control this device." >&2
    exit 1
fi

source_config

if [ "foo$2" = "fooboot" -a "${ONBOOT}" = "no" ]
then
    exit
fi

IPSETUP=no

# przyjmuje warto¶æ np: "dummy" czy "eth" itd.
DEVICETYPE=`echo $DEVICE | sed "s/[0-9]*$//"`
# przyjmuje eth0 przy eth0 lub eth0:1 lub eth0:alias
REALDEVICE=`echo $DEVICE | sed 's/:.*//g'`

if echo $DEVICE | grep -q ':' ; then
    ISALIAS=yes
else
    ISALIAS=no
fi

# Old BOOTP variable
if [ "$BOOTP" = "yes" ]; then
    BOOTPROTO=bootp
fi

if [ "$BOOTPROTO" = bootp -o "$BOOTPROTO" = dhcp ]; then
    PUMP=true
fi

OTHERSCRIPT="/etc/sysconfig/network-scripts/ifup-${DEVICETYPE}"

if [ -x $OTHERSCRIPT ]; then
    exec $OTHERSCRIPT $CONFIG $2
fi

# is this device available? (this catches PCMCIA devices for us)
/sbin/ifconfig ${REALDEVICE} 2>&1 | grep -s "not found" > /dev/null
if [ "$?" = "0" ]; then
    echo "Delaying ${DEVICE} initialization."
    exit 0
fi

if [ "$SLAVE" = yes -a "$ISALIAS" = no -a "$MASTER" != "" -a \
     -x /sbin/ifenslave ]; then
    RFLAG="" ; [ "$RECIEVE-ONLY" = yes ] && RFLAG="-r"

    ifconfig ${DEVICE} down
    echo "Enslaving $DEVICE to $MASTER"
    ifenslave $RFLAG "$MASTER" "$DEVICE"

    exit 0
fi

if [ -n "$MACADDR" ]; then
   ifconfig ${DEVICE} hw ether ${MACADDR}
fi

if [ -n "$PUMP" ]; then
    echo -n "Determining IP information for $DEVICE..."
    if /sbin/pump -i $DEVICE ; then
       echo " done."
    else
       echo " failed."
       exit 1
    fi

else

if [ -z "$PREFIX" ] && [ -n "$NETMASK" ]; then
    PREFIX="`calcprefix $NETMASK`"
fi

if [ -z "$NETMASK" ] && [ -n "$PREFIX" ]; then
    NETMASK="`calcnetmask $PREFIX`"
fi

if [ "$IPSETUP" != yes ]; then
    if [ -z "$PREFIX" ]; then
	eval `/bin/ipcalc --prefix ${IPADDR}`
    fi

    if [ -z "$BROADCAST" ]; then
	eval `/bin/ipcalc --broadcast ${IPADDR} ${NETMASK}`
    fi

    if [ -z "$NETWORK" ]; then
	eval `/bin/ipcalc --network ${IPADDR} ${NETMASK}`
    fi

#    ifconfig ${DEVICE} ${IPADDR} netmask ${NETMASK} broadcast ${BROADCAST}
    ip link set ${DEVICE} up
    ip addr add ${IPADDR}/${PREFIX} broadcast ${BROADCAST}

    if [ "${IP6VNETWORKING}" = "yes" ] ; then 
      for ADDR in ${IP6VADDRS} ; do
        ip addr add ${ADDR} dev ${DEVICE}
      done  
    fi

# hack for 2.2 kernels
    if [ "$ISALIAS" = no ] && [ -z "`route -n | sed "s/ .*//" | grep ${NETWORK}`" ]; then
# potrzebna zamiana netmaski z postaci np. 255.255.255.255 -> 32
#	route add -net ${NETWORK} netmask ${NETMASK} ${DEVICE}
	ip route add ${NETWORK}/${PREFIX} ${DEVICE}
    else
#	route add -host ${IPADDR} ${DEVICE}
	ip route add ${IPADDR}/32 dev ${DEVICE}
    fi

    . /etc/sysconfig/network

    if [ "${GATEWAY}" != "" ]; then
	if [ "${GATEWAYDEV}" = "" -o "${GATEWAYDEV}" = "${DEVICE}" ]; then
	    # set up default gateway
#	    route add default gw ${GATEWAY} ${DEVICE}
	    ip route add 0.0.0.0/0 via ${GATEWAY} dev ${DEVICE}
	    DEFGW=${GATEWAY}
	fi
    fi

    if [ "$BOOTPROTO" = bootp -a "$ISALIAS" = no ]; then
	if [ -n "$GATEWAYS" ]; then
	    for gw in $GATEWAYS; do
		if [ $gw != "${DEFGW}" ]; then
#		    route add default gw $gw ${DEVICE}
		    ip route add 0.0.0.0/0 via $gw dev ${DEVICE}
		fi
	    done
	fi

	if [ -n "$DNSSRVS" -a -n "$SEARCH" ]; then
	    echo "search $SEARCH" > /etc/resolv.conf
	    for dns in $DNSSRVS; do
		    echo "nameserver $dns" >> /etc/resolv.conf
	    done
	fi

	if [ -n "$BOOTPHOSTNAME" -a -n "$NEEDHOSTNAME" ]; then
	    set_hostname $BOOTPHOSTNAME
	fi
    fi
fi

if [ "$IPX" = yes ]; then
	/etc/sysconfig/network-scripts/ifup-ipx $DEVICE
fi

exec /etc/sysconfig/network-scripts/ifup-post $CONFIG
