#!/bin/sh
#
# /etc/rc.d/rc.sysinit - run once at boot time
# $Id: rc.sysinit,v 1.36 1999/10/27 05:46:27 kloczek Exp $
#
# Taken in part from Miquel van Smoorenburg's bcheckrc.
# Changes:      Arkadiusz Mi¶kiewicz <misiek@pld.org.pl>
#

# Set the path
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

# NLS
if [ -f /etc/sysconfig/i18n ]; then
	. /etc/sysconfig/i18n
	[ -n "$LANG" ] && export LANG || unset LANG
	[ -n "$LC_CTYPE" ] && export LC_CTYPE || unset LC_CTYPE
	[ -n "$LC_COLLATE" ] && export LC_COLLATE || unset LC_COLLATE
	[ -n "$LC_MESSAGES" ] && export LC_MESSAGES || unset LC_MESSAGES
	[ -n "$LC_NUMERIC" ] && export LC_NUMERIC || unset LC_NUMERIC
	[ -n "$LC_MONETARY" ] && export LC_MONETARY || unset LC_MONETARY
	[ -n "$LC_TIME" ] && export LC_TIME || unset LC_TIME
	[ -n "$LC_ALL" ] && export LC_ALL || unset LC_ALL
	[ -n "$LANGUAGE" ] && export LANGUAGE || unset LANGUAGE
	[ -n "$LINGUAS" ] && export LINGUAS || unset LINGUAS
fi


# Read functions
. /etc/rc.d/init.d/functions

# Read network config data.
if [ -f /etc/sysconfig/network ]; then
	. /etc/sysconfig/network
else
	NETWORKING=no
	HOSTNAME=localhost
fi

# Read system config data.
if [ -f /etc/sysconfig/system ]; then
	. /etc/sysconfig/system
else
	RUN_SULOGIN_ON_ERR=yes
	RUN_ISAPNP=yes
	PANIC_REBOOT_TIME=0
	DELAY_LOGIN=yes
	CLEAN_TMP=no
	CONSOLE_LOGLEVEL=1
	LOAD_SOUND=yes
	SET_SLINKS=yes
fi

# Set console loglevel
/sbin/loglevel $CONSOLE_LOGLEVEL

# Start up swapping.
run_cmd "`nls "Activating swap partitions"`" swapon -a

# Set the hostname.
run_cmd "`nls "Host:"` ${HOSTNAME}" hostname ${HOSTNAME}

# Set the NIS domain name
if [ -n "$NISDOMAIN" ]; then
	run_cmd "`nls "NIS Domain:"` ${NISDOMAIN}" domainname $NISDOMAIN
else
	domainname ""
fi

if [ -f /fsckoptions ]; then
	fsckoptions=`cat /fsckoptions`
else
	fsckoptions=''
fi

if [ -f /forcefsck ]; then
        fsckoptions="-f $fsckoptions"
fi

# we need /proc mounted before starting fsck
mount -t proc /proc /proc

# Test for NFS Root
NFSROOT=`cat /proc/mounts | awk '{ if ($2 ~ /^\/$/ && $3 ~ /^nfs$/) print $3 }'`

_RUN_QUOTACHECK=0
if [ ! -f /fastboot ] && [ ! -n "$NFSROOT" ]; then
	show "Checking root filesystems."; started
	initlog -c "fsck -C -T -a $fsckoptions /"

	rc=$?

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		nls "\n\n*** An error occurred during the file system check.\n*** Dropping you to a shell; the system will reboot\n*** when you leave the shell.\n"

		PS1="`nls "(Repair filesystem) #"`"; export PS1
		if [ "$RUN_SULOGIN_ON_ERR" = "yes" ]; then
			sulogin
		else
			/bin/sh
		fi

		run_cmd "Unmounting file systems" umount -a
		mount -n -o remount,ro /
		run_cmd "Automatic reboot in progress." reboot
	elif [ "$rc" = "1" ]; then
		_RUN_QUOTACHECK=1
	fi
fi

# check for arguments 
if grep -i nopnp /proc/cmdline >/dev/null ; then
	PNP=
else
	PNP=yes
fi

# set up pnp 
if [ -x /sbin/isapnp -a -f /etc/isapnp/isapnp.conf ]; then
	if [ -n "$PNP" ] && [ "$RUN_ISAPNP" = "yes" ]; then
		run_cmd "Setting up ISA PNP devices" /sbin/isapnp /etc/isapnp/isapnp.conf
	fi
fi

# Remount the root filesystem read-write.
run_cmd "Remounting root filesystem in rw mode" mount -n -o remount,rw /

# Update quotas if fsck was run on /.
if [ X"$_RUN_QUOTACHECK" = "X1" -a -x /sbin/quotacheck ] && [ ! -n "$NFSROOT" ]; then
        run_cmd "Checking root filesystem quotas" /sbin/quotacheck -v /
fi

# /etc/nologin when starting system
[ -f /etc/nologin.boot ] && rm -f /etc/nologin /etc/nologin.boot

if [ "$DELAY_LOGIN" = "yes" ] && [ ! -f /etc/nologin ]; then
	show "Enabling Delay Login"; busy
	echo > /etc/nologin
	nls "System bootup in progress  - please wait" >> /etc/nologin
	echo >> /etc/nologin
	chmod 644 /etc/nologin
	cp -fp /etc/nologin /etc/nologin.boot
	deltext; ok
fi


# Clear mtab
>/etc/mtab

# Enter root and /proc into mtab.
mount -f /
mount -f /proc

if ! grep -i nomodules /proc/cmdline >/dev/null && [ -f /proc/ksyms ]; then
	USEMODULES=y
else
	USEMODULES=
fi

# Kernel dependent links
rm -f /lib/modules/preferred
rm -f /lib/modules/default
if [ -x /sbin/depmod -a -n "$USEMODULES" ]; then
 if [ "$SET_SLINKS" != "no" ]; then
    # Get ready for kmod if module support in the kernel
    if [ -z `uname -r | grep "-"` ]; then
       # we're using a new kernel, no preferred needed
       mver=`uname -r`
    else
       ktag="`cat /proc/version`"
       mtag=grep -l "$ktag" /lib/modules/*/.rhkmvtag 2> /dev/null
       if [ -n "$mtag" ]; then
          mver=echo $mtag | sed -e 's,/lib/modules/,,' -e 's,/.rhkmvtag,,' -e 's,[       ].*$,,'
       fi
       if [ -n "$mver" ]; then
         ln -sf /lib/modules/$mver /lib/modules/default
       fi
    fi
 fi
    [ -n "$mver" -a -f "/boot/module-info-$mver" ] && ln -sf /boot/module-info-$mver /boot/module-info
    [ -n "$mver" -a -f "/boot/System.map-$mver" ] && ln -sf /boot/System.map-$mver /boot/System.map
    run_cmd "Finding module dependencies" depmod -a -s
fi

# load sound modules
if [ -n "$USEMODULES" ] && [ "$LOAD_SOUND" = "yes" ]; then
   if grep -s -q "^alias sound" /etc/modules.conf ; then
      run_cmd "Loading sound module" modprobe -s sound
   fi
   if grep -s -q "^alias midi" /etc/modules.conf ; then
      run_cmd "Loading midi module" modprobe -s midi
   fi
fi

if [ -f /proc/sys/kernel/modprobe ]; then
	# /proc/sys/kernel/modprobe indicates built-in kmod instead
	echo "/sbin/modprobe" > /proc/sys/kernel/modprobe
fi

# Add raid devices
if [ -f /proc/mdstat -a -f /etc/raidtab ]; then
	show "Starting up RAID devices."; started

	rc=0
	
	for i in `grep "raiddev" /etc/raidtab | awk '{print $2}'`
	do
		RAIDDEV=`basename $i`
		RAIDSTAT=`grep "^$RAIDDEV : active" /proc/mdstat`
		if [ -z "$RAIDSTAT" ]; then
			# Try raidstart first...if that fails then
			# fall back to raid0run.
			RESULT=1
			if [ -x /sbin/raidstart ]; then
				/sbin/raidstart $i
				RESULT=$?
			fi
			if [ $RESULT -gt 0 -a -x /sbin/raid0run ]; then
				/sbin/raid0run $i
			fi
		fi
	done

	# A non-zero return means there were problems.
	if [ $rc -gt 0 ]; then
		show "Starting up RAID devices."; fail
		nls "\n\n*** An error occurred during the RAID startup\n*** Dropping you to a shell; the system will reboot\n*** when you leave the shell.\n"

		PS1="`nls "(RAID Repair) #"`"; export PS1
		if [ "$RUN_SULOGIN_ON_ERR" = "yes" ]; then
			sulogin
		else
			/bin/sh
		fi

		run_cmd "Unmounting file systems" umount -a
		run_cmd "Remounting root filesystem in ro mode" mount -n -o remount,ro /
		run_cmd "Automatic reboot in progress" reboot
	fi
	show "Starting up RAID devices."; ok
fi

# Check filesystems
if [ ! -f /fastboot ]; then
	show "Checking filesystems."; started
	initlog -c "fsck -C -T -R -A -a $fsckoptions"

	rc=$?

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		nls "\n\n*** An error occurred during the file system check.\n*** Dropping you to a shell; the system will reboot\n*** when you leave the shell.\n"

		PS1="`nls "(Repair filesystem) #"`"; export PS1
		if [ "$RUN_SULOGIN_ON_ERR" = "yes" ]; then
			sulogin
		else
			/bin/sh
		fi

		run_cmd "Unmounting file systems" umount -a
		run_cmd "Remounting root filesystem in ro mode" mount -n -o remount,ro /
		run_cmd "Automatic reboot in progress." reboot
	elif [ "$rc" = "1" -a -x /sbin/quotacheck ]; then
		run_cmd "Checking filesystem quotas" /sbin/quotacheck -v -R -a
	fi
fi

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted). Contrary to standard usage,
# filesystems are NOT unmounted in single user mode.
run_cmd "Mounting local filesystems." mount -a -t nonfs,smbfs,ncpfs,proc

# set the console font
#if [ -x /sbin/setsysfont ]; then
#	show "Loading default system font"; busy
#	if (/sbin/setsysfont > /dev/null 2>&1); then deltext; ok; else deltext; fail; fi
#fi

if [ -x /sbin/quotaon ]; then
	run_cmd "Turning on quotas for local filesystems" /sbin/quotaon -a
fi

# Clean out /etc & /var/{run/*,log/{b,w}tmpx}}.
rm -f /etc/mtab~ /fastboot /fsckoptions /forcefsck
rm -f /var/run/utmp  
:>/var/run/utmpx
chown root.utmp /var/run/utmpx
chmod 0664 /var/run/utmpx /var/log/wtmpx

# Clean /tmp
if [ "$CLEAN_TMP" = "yes" ]; then
	rm -rf /tmp/*
fi

# Delete UUCP lock files.
rm -f /var/lock/LCK*

# Delete stale subsystem files.
rm -f /var/lock/subsys/*

# Delete stale pam_console locks.
rm -f /var/lock/console/*
rm -f /var/lock/console.lock

# Delete stale pid files
rm -f /var/run/*.pid
rm -f /var/spool/postoffice/.pid.*

# Delete X locks
rm -f /tmp/.X*-lock

# Delete Postgres sockets
rm -f /tmp/.s.PGSQL.*

# Set the system clock.
show "Setting clock"; busy

ARC=0
UTC=0
if [ -f /etc/sysconfig/clock ]; then
	. /etc/sysconfig/clock

	# convert old style clock config to new values
	if [ "${CLOCKMODE}" = "GMT" ]; then
		UTC=true
	elif [ "${CLOCKMODE}" = "ARC" ]; then
	    ARC=true
	fi
fi

if [ -x /sbin/hwclock ]; then
	CLOCKFLAGS="--hctosys"
	CLOCK=/sbin/hwclock
else
	CLOCKFLAGS="-a"
	CLOCK=/sbin/clock
fi

case "$UTC" in
  yes|true)
	CLOCKFLAGS="$CLOCKFLAGS -u";
#	echo -n " (utc)"
	;;
esac

case "$ARC" in
  yes|true)
	CLOCKFLAGS="$CLOCKFLAGS -A";
#	echo -n " (arc)"
	;;
esac

#echo -n ": "
if ($CLOCK $CLOCKFLAGS); then deltext; ok; else deltext; fail; fi

show "`nls "Date set to"` `date`"; ok

# Right, now turn on swap in case we swap to files.
show "Enabling swap space"; busy
if [ "`LANG=C swapon -a 2>&1 | grep -v "busy"`" = "" ]; then
	deltext; ok
else
	deltext; fail
fi

# Initialize the serial ports.
if [ -f /etc/rc.d/rc.serial ]; then
	. /etc/rc.d/rc.serial
fi

# If a SCSI tape has been detected, load the st module unconditionally
# since many SCSI tapes don't deal well with st being loaded and unloaded
if [ -f /proc/scsi/scsi ] && cat /proc/scsi/scsi | grep -q 'Type:   Sequential-Access' 2>/dev/null ; then
	if cat /proc/devices | grep -qv ' 9 st' ; then
		if [ -n "$USEMODULES" ] ; then
			# Try to load the module.  If it fails, ignore it...
			insmod -p st >/dev/null 2>&1 && modprobe -s st >/dev/null 2>&1
		fi
	fi
fi

# there could be a new kernel version.  reinit /etc/psdevtab, to be sure.
rm -f /etc/psdevtab
#if [ -x /bin/ps ]; then
#show "Rebuilding /etc/psdevtab database"; busy
#if (ps > /dev/null 2>&1); then deltext; ok; else deltext; fail; fi
#fi

if ([ -f /proc/sys/kernel/panic ] && [ "$PANIC_REBOOT_TIME" -gt "0" ] 2>/dev/null); then
show "`nls "Sending val. %s to /proc/sys/kernel/panic" "$PANIC_REBOOT_TIME"`"; busy
if (echo $PANIC_REBOOT_TIME > /proc/sys/kernel/panic); then deltext; ok; else deltext; fail; fi
fi

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg > /var/log/dmesg
chmod 640 /var/log/dmesg

# Feed entropy into the entropy pool
/etc/rc.d/init.d/random start
